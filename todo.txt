全体の処理
    テスト容易度:高 && 重要度:高
    -[x]htmlの基本構造を作る
        -[x]titleタグの中を「title | subtitle」みたいにする
            -[x]titleタグの中に「ログイン | 掲示板アプリ」などのタイトルを作りたい
        -[x]もし指定がなかったら「掲示板アプリ」というだけにする
        -[x]フラッシュメッセージが入っていたら表示する

    -[x]右側（nav）のヘッダーを整える
        -[x]ログイン時、自分の名前+ログアウトのリンク
        -[x]ログアウト時、ログイン+サインアップのリンク
    テスト容易度:低 && 重要度:低

user系の処理
    テスト容易度:高 && 重要度:高
    -[x]新規登録画面
        -[x]バリデーションエラー
            -[x]名前は空欄ダメ
            -[x]名前は50文字以上
            -[x]メアドは空欄
            -[x]メアドは250文字以上
            -[x]メアドは正規表現にマッチする
            -[x]メアドは大文字も小文字にする
            -[x]パスワードは空欄
            -[x]パスワード6文字以上
        -[x]エラーならrenderで元のビューを表示
            -[x]名前が空でpost通信したらrenderでビューに戻す
        -[x]posts一覧へリダイレクト
        -[x]フラッシュメッセージを表示する

    ※ログインのテストができなかった（調べてもわからないので質問してみる）
    -[x]ログインの画面
        -[x]正しければ、posts一覧へリダイレクト
        -[x]フラッシュメッセージを表示する
        -[x]セッションにidを入れておく

        -[x]正しくなければ、renderでビューを表示
        -[x]正しくなくてもrenderでビューを表示

    -[x]ログアウトの処理を実装する
        -[x]delete通信で"logout"通信
        -[x]セッションをリセットして、
        -[x]フラッシュメッセージを入れて、
        -[x]ログインページへリダイレクトをする。
        -[x]@current_userを無効にする

    -[]ユーザー詳細ページを実装する
        -[]ユーザー名とメアドを表示
        -[]ログインしている本人なら「編集」リンクも作る

    -[]ユーザー更新機能を作る
        -[]ユーザー名とメールアドレスを変更できる
        -[]バリデーション
        -[]パスワードは空でも良い
        -[]リダイレクトはユーザ詳細画面
        -[]フラッシュメッセージ
        -[]NGならrenderでeditページへ

    テスト容易度:低 && 重要度:低
    ・ログインボタンが押されたら
    ・DBと入力された値を比較
    ・正しいデータならDBに保存
    ・「戻る」ボタンはデフォルトで設置

post系の処理
    テスト容易度:高 && 重要度:高
    -[x]投稿一覧ページを作成する(index)
        -[x]タイトルは詳細ページのリンクになってる
        -[x]投稿者の名前が表示されるようにする
    -[x]新規投稿機能を追加する(new,create)
        -[x]バリデーション
        ok
        -[x]フラッシュメッセージと
        -[x]投稿一覧へリダイレクト
        -[x]データベースを書き換える
        NG
        -[x]renderでposts/newのビューに戻る
    -[x]投稿詳細ページを作る(show)
        -[x]投稿したユーザーなら編集権限がある
    -[x]投稿修正ページを追加する(edit,update)
        -[x]バリデーション
        -[x]フラッシュメッセージ
        -[x]リダイレクトする
        -[x]データベースを書き換える
    -[x]投稿削除ページを作る(destroy)
        -[x]フラッシュメッセージ
        -[x]リダイレクト
        -[x]データベースを書き換える

    -[x]投稿したポストの編集、削除ができるのは
        -[x]ログインしているユーザーかつ
        -[x]投稿した本人のみ

        -[x]新規投稿はログインしていないとダメ

    テスト容易度:低 && 重要度:低
    ・updated_at順に並べる
    ・DBから引っ張り出して表示する
    ・入力フォームにタイトルと内容のフォーム、hidden属性でuser_idを入力しておく
    ・下に編集、削除、戻るボタンの3つがある
    ・投稿したタイトルと内容を書いて、
    ・タイトルと内容を修正するフォームがある
    ・タイトルと内容は修正前のものが入力されている


comment系の処理
テスト容易度:高 && 重要度:高
    -[x]コメント作成画面
        -[x]ログインしている人だけ
        -[x]hiddenのフォームにuser_idやpost_idを入れておく
    -[x]新規コメント機能
        -[x]ログインしていないとダメ
        -[x]バリデーション
        -[x]作成されたらフラッシュメッセージを表示
        -[x]posts_pathへリダイレクト
        -[x]コメントがDBに作成される
    -[x]コメント編集機能
        -[x]ログインかつ本人だけが編集できる
        -[x]フラッシュメッセージも入れる
        -[x]リダイレクト処理もする
    -[x]コメント削除機能
        -[x]ログインかつ本人のみ
        -[x]フラッシュメッセージも入れる
        -[x]リダイレクト処理も入れる
    -[x]画面の表示の仕方
        -[x]「編集」と「削除」リンクはログインユーザーのコメントだけ
テスト容易度:低 && 重要度:低
    ・user_id,post_id,内容の3つをDBに登録
    ・posts/indexにコメントを表示する

like系の処理
テスト容易度:高 && 重要度:高
    -[x]いいね追加機能
        -[x]ログイン必須
        -[x]DBに追加する
    -[x]いいね削除機能
        -[x]ログイン必須
        -[x]DBを削除する
テスト容易度:低 && 重要度:低
    ・いいねの数を表示する
    ・ハートマークの色を塗りつぶす
